{"version":3,"file":"index.js","sources":["../../src/clang.ts","../../src/get-binaryen.ts","../../src/util.ts","../../src/tracking.ts","../../src/index.ts"],"sourcesContent":["import { exec } from \"child_process\";\nlet hasShownEmscriptenBanner = false;\nasync function runProgram(prog, args, { returnsStdout } = {}) {\n    returnsStdout || (returnsStdout = false);\n    let resolve;\n    let reject;\n    let promise = new Promise((res, rej) => { resolve = res; reject = rej; });\n    let allStdOut = new Array();\n    const cb = (error, stdout, stderr) => {\n        if (error) {\n            const result = /^wasm-ld: error: ((.+?):\\s+(.+?):\\s+(.+))/.exec(stderr);\n            if (result) {\n                if (result[3] == \"undefined symbol\") {\n                    console.error(`There was a linker error; C++ dependencies must be imported manually to resolve the reference to \"${result[4]}\" i.e. by importing the C++ file that defines that. The original error is as follows:`);\n                }\n                else {\n                    console.error(`An unknown linker error occurred, which I'm sure will be very fun to debug:`);\n                }\n                console.error(result[1]);\n            }\n            reject(stderr);\n        }\n        if (stdout != null && stdout != \"\") {\n            if (stdout.startsWith(\"emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld)\") && stdout.includes(\"This is free and open source software under the MIT license.\")) {\n                if (!hasShownEmscriptenBanner) {\n                    hasShownEmscriptenBanner = true;\n                    allStdOut.push(stdout);\n                }\n            }\n            else {\n                allStdOut.push(stdout);\n            }\n        }\n    };\n    let childProcess = exec(`${prog} ${args}`, cb);\n    childProcess.on(\"close\", (_code, signal) => {\n        if (signal) {\n            reject(signal);\n        }\n        else {\n            resolve();\n        }\n    });\n    const ret = await promise;\n    if (returnsStdout)\n        return allStdOut.join(\"\\n\");\n    if (allStdOut.length)\n        console.log(...allStdOut);\n    return ret;\n}\nexport async function runEmscripten(args, opts = {}) {\n    return runProgram(\"em++\", `${args}`, opts);\n}\n/*\nexport async function runClang(args: string) {\n    return runProgram(\"clang++\", `${args} -fms-extensions -I \"C:/Program Files (x86)/Windows Kits/10/Include/10.0.22621.0/ucrt\" -I \"C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.37.32822/include\"`);\n}\n\nexport async function runLoader(args: string) {\n    return runProgram(\"wasm-ld\", args);\n}\n*/ \n//# sourceMappingURL=clang.js.map","let _b;\n// It's weird like this because loading binaryen throws a lot of caught exceptions\n// which are just annoying to debug around. So this delays it as long as possible.\nexport async function getBinaryen() {\n    if (_b == null) {\n        _b = import(\"binaryen\");\n    }\n    return (await _b).default;\n}\n//# sourceMappingURL=get-binaryen.js.map","import { readFile as readFileNode } from \"fs/promises\";\nexport async function readFile(path, mode) {\n    try {\n        let ret;\n        if (mode != \"string\")\n            ret = await readFileNode(path);\n        else\n            ret = await readFileNode(path, { encoding: \"utf-8\" });\n        return ret;\n    }\n    catch (ex) {\n        throw ex;\n    }\n}\nexport function getDatafilePlugin(options) {\n    const datafilePluginName = 'rollup-plugin-datafile';\n    if (Array.isArray(options.plugins)) {\n        const parentPlugin = options.plugins.find(plugin => (plugin === null || plugin === void 0 ? void 0 : plugin.name) === datafilePluginName);\n        return parentPlugin || null;\n    }\n    return null;\n}\n//# sourceMappingURL=util.js.map","import { normalizePath } from \"@rollup/pluginutils\";\nimport { mkdir } from \"fs/promises\";\nimport { MapOfSets } from \"map-and-set-extensions\";\nimport { basename, dirname, join, relative } from \"path\";\nimport { cwd, stdout } from \"process\";\nimport { clearLine, cursorTo } from \"readline\";\nimport { runEmscripten } from \"./clang.js\";\nimport { getBinaryen } from \"./get-binaryen.js\";\nimport { readFile } from \"./util.js\";\nexport const HELPER_IMPORT_FINAL_WASM_0 = \"\\0__WASM_IMPORT_FINAL_\";\nexport const HELPER_IMPORT_HANDLE_WASM_DATA = \"\\0__HELPER_IMPORT_HANDLE_WASM_DATA_\";\nexport function funnyStartsWith(input, startsWith) {\n    return input.startsWith(startsWith);\n}\n// Basically just a wrapper around a Map<>\nexport class ExecutionUnits {\n    constructor(inputOptions, buildMode, compilerOptions) {\n        this.inputOptions = inputOptions;\n        this.buildMode = buildMode;\n        this.compilerOptions = compilerOptions;\n        this.executionUnitsByName = new Map();\n        this.cppFilesById = new Map();\n        this.wasmFilesById = new Map();\n        this.executionUnitsById = new Map();\n        this.context = null;\n        this.cppUniqueIdCounter = 0;\n        this.exeUniqueIdCounter = 0;\n        this.wasmUniqueIdCounter = 0;\n    }\n    getByUrl(path) {\n        if (path.includes(\".c\")) {\n            let exeUnitName = this.compilerOptions.defaultExeName || \"default\";\n            let url;\n            try {\n                url = new URL(`ext:${path}`);\n            }\n            catch (ex) {\n                return undefined;\n            }\n            if (url.pathname.endsWith(\".cpp\") || url.pathname.endsWith(\".c\") || url.pathname.endsWith(\".cc\")) {\n                if (url.searchParams.has(\"exe\")) {\n                    exeUnitName = url.searchParams.get(\"exe\");\n                }\n                return this.getByName(exeUnitName);\n            }\n        }\n        return undefined;\n    }\n    getById(id) {\n        if (typeof id == \"string\" && id.startsWith(HELPER_IMPORT_FINAL_WASM_0))\n            return this.getById(parseInt(id.substring(HELPER_IMPORT_FINAL_WASM_0.length)));\n        console.assert(this.executionUnitsById.has(id));\n        return this.executionUnitsById.get(id);\n    }\n    getByName(exe) {\n        if (!this.executionUnitsByName.has(exe))\n            this.executionUnitsByName.set(exe, new ExecutionUnit(this, exe, this.compilerOptions.memorySizes[exe] || 16777216));\n        return this.executionUnitsByName.get(exe);\n    }\n    getCppFileById(id) {\n        /*if (typeof id === 'string') {\n            return this.getCppFileById(parseInt(id.substring(HELPER_IMPORT_CPP_.length)))\n        }\n        else*/ {\n            let file = this.cppFilesById.get(id);\n            if (!file) {\n                debugger;\n                throw new Error(`Internal error: missing c++ file ${id}`);\n            }\n            return file;\n        }\n    }\n    getWasmFile(id) {\n        /*if (typeof id === 'string') {\n            return this.getWasmFile(parseInt(id.substring(HELPER_IMPORT_WASM_.length)))\n        }\n        else*/ {\n            let file = this.wasmFilesById.get(id);\n            if (!file) {\n                debugger;\n                throw new Error(`Internal error: missing wasm file ${id}`);\n            }\n            return file;\n        }\n    }\n}\nexport class ExecutionUnit {\n    constructor(parent, key, memorySize) {\n        this.parent = parent;\n        this.key = key;\n        this.memorySize = memorySize;\n        this.cppFilesByPath = new Map();\n        this.cppFilesById = new Map();\n        this.cppFilesByHeaderPath = new Map();\n        this.wasmFilesByPath = new Map();\n        this.wasmFilesById = new Map();\n        this.flagsClang = \"\"; // Used when compiling a C++ files to a WASM files\n        this.flagsLinker = \"\"; // Used when linking multiple WASM files together\n        //get outputTempWasmPath() { return `./temp/exe_${this.uniqueId}.wasm` }\n        this.imports = [];\n        // `null` indicates \"export all\"\n        this.importsFromJs = new Set();\n        this.exeNeedsRebuild = true;\n        this.uniqueId = this.parent.exeUniqueIdCounter++;\n        this.parent.executionUnitsById.set(this.uniqueId, this);\n        this.onWritePromise = new Promise((resolve, _reject) => { this.onWriteResolve = resolve; this.onWriteReject = this.onWriteReject; });\n    }\n    jsImportsAll() { this.importsFromJs = null; }\n    /**\n     * When the JS that imports a C++ files is parsed,\n     * we examine the import to see the names of the functions (etc.) that are used\n     * and store them by calling this member function.\n     */\n    addImportFromJs(str) {\n        var _a;\n        (_a = this.importsFromJs) === null || _a === void 0 ? void 0 : _a.add(str);\n    }\n    get includePathsAsArgument() {\n        return this.parent.compilerOptions.includePaths.map(includePath => `-I \"${includePath}\"`).join(\" \");\n    }\n    get finalFilePath() { return `modules/${this.key}.wasm`; }\n    /**\n     * Does a few things:\n     *\n     * * Compiles each individual C++ source file\n     * * Links each individual WASM file\n     * * Finds all the remaining imports that need to be linked at runtime\n     * * Tells the datafile plugin that files have been written and that Rollup's `emitFile` can be called.\n     *\n     * @returns\n     */\n    async compile() {\n        await mkdir(dirname(this.finalFilePath), { recursive: true });\n        let projectDir = cwd();\n        const finalTempPath = relative(projectDir, this.finalFilePath);\n        const argsExportedFunctions = this.importsFromJs == null ? \"-sLINKABLE=1 -sEXPORT_ALL=2\" :\n            (this.importsFromJs.size ? `-sEXPORTED_FUNCTIONS=${[...this.importsFromJs].map(i => `_${i}`).join(\",\")}` : \"\");\n        let argsShared = \"--no-entry -std=c++20 -fwasm-exceptions -sALLOW_MEMORY_GROWTH=1\"; // -sSTANDALONE_WASM=1  // -sMINIMAL_RUNTIME=2\n        let argsDebug = `-g -gdwarf-4 -gsource-map`;\n        let argsRelease = `-flto -O3`;\n        const finalArgs = [\n            this.includePathsAsArgument,\n            argsShared,\n            (this.parent.buildMode == \"debug\" ? argsDebug : argsRelease)\n        ];\n        let b;\n        if (this.cppFilesByPath.size == 0) {\n            console.log(`No C++ files were imported. Nothing to compile...`);\n        }\n        else {\n            //let maxLen = 0;\n            console.log(`Compiling individual C++ files to object files...`);\n            let count = 0;\n            await Promise.all([...this.cppFilesByPath].map(async ([path, cppFile]) => {\n                if (cppFile.wasm.objNeedsRebuild) {\n                    cppFile.wasm.objNeedsRebuild = false;\n                    const emscriptenArgs = [\n                        ...finalArgs,\n                        \"-c\",\n                        `-o ${cppFile.wasmPath}`,\n                        path // The input path of the source file\n                    ];\n                    try {\n                        await runEmscripten(emscriptenArgs.join(\" \"));\n                    }\n                    catch (ex) {\n                        stdout.write(\"\\n\");\n                        console.log(ex);\n                        stdout.write(\"\\n\");\n                    }\n                    clearLine(stdout, 0);\n                    cursorTo(stdout, 0, undefined);\n                    stdout.write(`Compiling to ${cppFile.wasm.path}...`);\n                    const newData = await readFile(cppFile.wasm.path, \"binary\");\n                    this.exeNeedsRebuild || (this.exeNeedsRebuild = cppFile.wasm.contents == null || (newData.compare(new Uint8Array(cppFile.wasm.contents)) != 0));\n                    cppFile.wasm.contents = newData;\n                    ++count;\n                }\n                else {\n                    return Promise.resolve();\n                }\n            }));\n            clearLine(stdout, 0);\n            cursorTo(stdout, 0, undefined);\n            stdout.write(`Compiled ${count}/${this.cppFilesByPath.size} source files.\\n`);\n            if (!this.exeNeedsRebuild) {\n                console.log(`There were no changes to the individual .wasm files, so the final file does not need rebuilt.`);\n            }\n            else {\n                this.exeNeedsRebuild = false;\n                console.log(`Compiling all object files together into a the final executable...`);\n                const args = [\n                    Array.from(this.wasmFilesById).map(([_id, wasm]) => wasm.path).join(\" \"),\n                    `-o ${finalTempPath}`,\n                    ...finalArgs,\n                    argsExportedFunctions,\n                ].join(\" \");\n                await runEmscripten(`${args}`);\n                //const finalWasmContents = await readFile(this.finalFilePath, \"binary\");\n                //this.parent.context!.setAssetSource(this.fileReferenceId, finalWasmContents);\n                const binaryen = await getBinaryen();\n                b = binaryen.readBinary(await readFile(finalTempPath, \"binary\"));\n                for (let i = 0; i < b.getNumFunctions(); ++i) {\n                    const func = binaryen.getFunctionInfo((b.getFunctionByIndex(i)));\n                    if (func.module) {\n                        this.imports.push({ base: func.base, module: func.module, type: \"function\" });\n                    }\n                }\n                for (let i = 0; i < b.getNumGlobals(); ++i) {\n                    const func = binaryen.getGlobalInfo((b.getGlobalByIndex(i)));\n                    if (func.module) {\n                        this.imports.push({ base: func.base, module: func.module, type: \"global\" });\n                    }\n                }\n                for (let i = 0; i < b.getNumTables(); ++i) {\n                    const func = binaryen.getTableInfo((b.getTableByIndex(i)));\n                    if (func.module) {\n                        this.imports.push({ base: func.base, module: func.module, type: \"table\" });\n                    }\n                }\n            }\n        }\n        this.onWriteResolve();\n        return {\n            binaryen: b,\n            //data: finalWasmContents,\n            id: this.uniqueId,\n            // path: this.finalFilePath\n        };\n    }\n    getCppFileByPath(path) {\n        let file = this.cppFilesByPath.get(path);\n        if (!file) {\n            debugger;\n            throw new Error(`Internal error: missing c++ file at ${path}`);\n        }\n        return file;\n    }\n    async loadCppFile(path, addWatchFile) {\n        let ret;\n        try {\n            if (!this.cppFilesByPath.has(path)) {\n                let fileContents = await readFile(path, \"string\");\n                ret = new CppSourceFile(this, path, fileContents, this.parent.cppUniqueIdCounter++);\n                let newWasmFile = ret.wasm;\n                this.cppFilesByPath.set(path, ret);\n                this.cppFilesById.set(ret.uniqueId, ret);\n                this.wasmFilesByPath.set(ret.wasmPath, newWasmFile);\n                this.wasmFilesById.set(newWasmFile.uniqueId, newWasmFile);\n                this.parent.cppFilesById.set(ret.uniqueId, ret);\n                this.parent.wasmFilesById.set(newWasmFile.uniqueId, newWasmFile);\n                ret.cppNeedsReload = false;\n            }\n            else {\n                // This path only happens during watch mode.\n                ret = this.cppFilesByPath.get(path);\n                //if (cppFile.cppNeedsReload) {\n                //    cppFile.cppNeedsReload = false;\n                let newContents = await readFile(path, \"string\");\n                if (newContents != ret.contents || ret.includesDirty) {\n                    ret.includesDirty = false;\n                    // The source file has changed, \n                    // so we need to remake the file it compiles to\n                    // (watch mode only)\n                    ret.wasm.objNeedsRebuild = true;\n                }\n                ret.contents = newContents;\n                //}\n            }\n        }\n        catch (ex) {\n            console.error(`A JS file imported a C++ file that does not exist: ${path}`);\n            throw ex;\n        }\n        await ret.resolveIncludes(addWatchFile);\n    }\n}\nclass CppSourceFile {\n    async resolveIncludes(addWatchFile) {\n        (await runEmscripten(\"-E -H \" + this.path + ` ${this.executionUnit.includePathsAsArgument} -o ` + this.includesPath));\n        const b = await readFile(this.includesPath, \"string\");\n        const includes = new Set(b\n            .split(\"\\n\")\n            .map(line => {\n            if (line.startsWith(\"#\")) {\n                // Preprocessor would've removed this\n                const match = /^# ([0-9]+) (\".+?\")/.exec(line);\n                if (match) {\n                    // Uh, is this, like, okay? Better ways to parse a string maybe? TODO maybe?\n                    let includePath = JSON.parse(match[2]);\n                    if (!includePath.startsWith(\"<\") && !(includePath == this.path)) {\n                        includePath = normalizePath(includePath);\n                        // No sense in adding hundreds of useless file watchers, exclude the standard libraries\n                        if (!includePath.includes(\"emsdk/upstream/\"))\n                            return includePath;\n                    }\n                }\n            }\n            return \"\";\n        }).filter(include => !!include));\n        includes.forEach(include => {\n            MapOfSets.add(this.executionUnit.cppFilesByHeaderPath, normalizePath(include), this);\n            addWatchFile(include);\n        });\n    }\n    constructor(executionUnit, path, contents, uniqueId) {\n        this.executionUnit = executionUnit;\n        this.path = path;\n        this.contents = contents;\n        this.uniqueId = uniqueId;\n        // Set to false once we've read the file, \n        // then true when the file changes (during watch), \n        // then false once we've read it again, etc.\n        this.cppNeedsReload = true;\n        // This is set when we have detected a change to any #included file\n        this.includesDirty = true;\n        this.includePaths = new Set();\n        this.wasm = new WasmFile(this, this.wasmPath, this.executionUnit.parent.wasmUniqueIdCounter++);\n    }\n    get wasmPath() {\n        let projectDir = cwd();\n        return normalizePath(join(projectDir, `./temp/${this.uniqueId.toString(16).padStart(2, \"0\")}_${basename(this.path)}.wasm`));\n    }\n    get includesPath() {\n        let projectDir = cwd();\n        return normalizePath(join(projectDir, `./temp/${this.uniqueId.toString(16).padStart(2, \"0\")}_${basename(this.path)}.inc`));\n    }\n}\nclass WasmFile {\n    constructor(cppFile, path, uniqueId) {\n        this.cppFile = cppFile;\n        this.path = path;\n        this.uniqueId = uniqueId;\n        this.objNeedsRebuild = true;\n        this.contents = null;\n    }\n}\n//# sourceMappingURL=tracking.js.map","import { normalizePath } from \"@rollup/pluginutils\";\nimport { simple } from \"acorn-walk\";\nimport { mkdir } from \"fs/promises\";\nimport MagicString from \"magic-string\";\nimport { dirname, join } from \"path\";\nimport { runEmscripten } from \"./clang.js\";\nimport { ExecutionUnits } from \"./tracking.js\";\nimport { getDatafilePlugin } from \"./util.js\";\nconst SyntheticModuleName = \"wasm_module_\";\nasync function filter(allExeUnits, id, func) {\n    const executionUnit = allExeUnits.getByUrl(id);\n    if (executionUnit) {\n        return await func(executionUnit);\n    }\n}\n/**\n * This outputs the exports of the WASI library\n * in a way that can be tree-shaken depending on what WASI functions\n * the C++ code actually uses.\n *\n * (i.e. it's the virtual module that includes the weird comments whose lines get `replaceAll`d out)\n *\n * TODO: This is also one per execution unit -- is that necessary? Seems unnecessary, given how WASI instantiation works.\n */\nconst VMOD_THAT_EXPORTS_WASI_FUNCTIONS = `\\0C++_PLUGIN_WASI_`;\n/**\n * This is a virtual module, or rather a series of virtual modules, one per execution unit.\n *\n * It's responsible for importing and instantiating the WASM module from its URL.\n */\nconst WASM_LOADER = `\\0C++_PLUGIN_WASM_`;\nfunction pluginCpp({ includePaths, buildMode, wasiLib, useTopLevelAwait, memorySizes, defaultExeName } = {}) {\n    memorySizes !== null && memorySizes !== void 0 ? memorySizes : (memorySizes = {});\n    includePaths || (includePaths = []);\n    wasiLib || (wasiLib = \"basic-event-wasi\");\n    buildMode || (buildMode = \"release\");\n    useTopLevelAwait || (useTopLevelAwait = false);\n    let projectDir = process.cwd();\n    let allExeUnits = null;\n    let options = null;\n    // The key to this map is the name of the executable (empty string by default)\n    //let exeInfo = new Map<string, { filesCpp: number[] }>();\n    // The key to this map is the full path to the C++ file.\n    //let cppFileInfo = new Map<number, { pathCpp: string, keyWasm: number, contentsCpp: string }>();\n    // The key to this map\n    //let wasmFileInfo = new Map<number, { pathWasm: string; contentsWasm: ArrayBuffer; }>();\n    // This is a mapping of \"path to CPP file\" to \"information about its compilation\".\n    //const mapOfThings = new Map<string, CppCompilationInfo>();\n    let allImports = null;\n    let unhandledImports = null;\n    return {\n        name: 'rollup-plugin-cpp',\n        async buildStart(opts) {\n            options = opts;\n            allExeUnits !== null && allExeUnits !== void 0 ? allExeUnits : (allExeUnits = new ExecutionUnits(opts, buildMode, { includePaths: includePaths, memorySizes: memorySizes, defaultExeName: defaultExeName || \"default\" }));\n            allExeUnits.inputOptions = opts;\n            //await mkdir(join(projectDir, \"modules\"), { recursive: true });\n            await mkdir(join(projectDir, \"temp\"), { recursive: true });\n            try {\n                await runEmscripten(\"--version\");\n            }\n            catch (ex) {\n                console.log(`\\n\\n\\nCannot compile C++ because Emscripten is not installed on your system (specifically, it is not available on this system's PATH). If you're on Windows, and you just installed Emscripten and are still seeing this error, you may need to log out to reset your PATH.\\n\\n\\n`);\n                throw ex;\n            }\n        },\n        async watchChange(id) {\n            // Watch for any changes in any of the header files any of our C++ source files include\n            id = normalizePath(id);\n            for (let [, exe] of allExeUnits.executionUnitsById) {\n                const possiblyChangedCppFiles = exe.cppFilesByHeaderPath.get(id);\n                if (possiblyChangedCppFiles) {\n                    await Promise.all([...possiblyChangedCppFiles].map(cppFile => {\n                        cppFile.includesDirty = true;\n                        this.load({ id: cppFile.path, resolveDependencies: true });\n                    }));\n                }\n            }\n        },\n        resolveId(id, importer) {\n            allExeUnits.context = this;\n            if (id.startsWith(WASM_LOADER))\n                return id;\n            if (id.startsWith(VMOD_THAT_EXPORTS_WASI_FUNCTIONS))\n                return id;\n            return filter(allExeUnits, id, executionUnit => {\n                var _a;\n                id = normalizePath(id);\n                const datafilePluginApi = (_a = getDatafilePlugin(options)) === null || _a === void 0 ? void 0 : _a.api;\n                datafilePluginApi === null || datafilePluginApi === void 0 ? void 0 : datafilePluginApi.promisesToWaitFor.add(executionUnit.onWritePromise);\n                let fullPath = join(importer ? dirname(importer) : projectDir, id);\n                return {\n                    id: fullPath,\n                    syntheticNamedExports: `${SyntheticModuleName}${executionUnit.uniqueId}`\n                };\n            });\n        },\n        async load(id) {\n            if (id.startsWith(VMOD_THAT_EXPORTS_WASI_FUNCTIONS)) {\n                const knownWasi = [\"proc_exit\", \"fd_write\", \"fd_close\", \"fd_seek\", \"fd_read\", \"environ_sizes_get\", \"environ_get\"];\n                const knownEnv = [\"__throw_exception_with_stack_trace\"];\n                return `\r\nimport {\r\n${[...knownWasi, ...knownEnv].map(fname => `\\t${fname}`).join(\",\\n\")}\r\n} from ${JSON.stringify(wasiLib)};\r\n\r\nexport default {\r\n\twasi_snapshot_preview1: {\r\n${knownWasi.map(fname => `\\t\\t${fname}, \\t \\t /** __@WASM_IMPORT_OMITTABLE__ **/`).join(\"\\n\")}\r\n\t},\r\n\tenv: {\r\n${knownEnv.map(fname => `\\t\\t${fname}, \\t \\t /** __@WASM_IMPORT_OMITTABLE__ **/`).join(\"\\n\")}\r\n\t}\r\n}\r\n`;\n            }\n            if (id.startsWith(WASM_LOADER)) {\n                const executionUnit = allExeUnits.getById(+id.substring(WASM_LOADER.length));\n                // TODO: Want to import this from another file, but that's surprisingly difficult.\n                // import.meta.url on Windows results in a path like \"c:/c:/users/(...etc...)\"\n                // and I honestly have no clue how to normalize that in Node.\n                return (`\r\n// Import the WASM file from an external file, and wait on its response\r\nimport wasmResponse from ${JSON.stringify(`datafile:~/${executionUnit.finalFilePath}`)};\r\nimport wasi from ${JSON.stringify(VMOD_THAT_EXPORTS_WASI_FUNCTIONS + executionUnit.uniqueId)}\r\nimport { instantiateWasi } from \"basic-event-wasi\"\r\n\r\nlet instantiated = false;\r\n// An alias for instance.exports\r\nlet allExports;\r\n// The module, once it's parsed from wasmResponse\r\nlet module;\r\n// The instance created from the module parsed from wasmResponse\r\nlet instance;\r\n\r\n// An ArrayBuffer representing the memory the current instance's module was compiled with and is currently running\r\n// (Emscripten compiles with 0x1_00_00_00 bytes of memory by default)\r\nlet memory;\r\n\r\n// This is a promise that resolves to the WASM module **before WASI is initialized**.\r\n// WASI needs it to initialize itself; it shouldn't be used for any other purpose.\r\nconst { promise, resolve, reject } = Promise.withResolvers();\r\n\r\n// Call this to wait until the wasmResponse has been fetched, parsed, and instantiated\r\n// and, more importantly, allExports, module, and instance will have values.\r\nasync function untilReady() {\r\n\tif (!instantiated) {\r\n\t\tinstantiated = true;\r\n\t\tconst { wasiReady, imports } = instantiateWasi(promise, wasi);\r\n\t\tlet resolved;\r\n\t\tif (globalThis.Response && wasmResponse instanceof globalThis.Response)\r\n\t\t\tresolved = await WebAssembly.instantiateStreaming(wasmResponse, { ...imports });\r\n\t\telse\r\n\t\t\tresolved = await WebAssembly.instantiate(wasmResponse, { ...imports });\r\n\r\n\t\tresolve(resolved);\r\n\t\tawait wasiReady;\r\n\r\n\t\tmodule = resolved.module;\r\n\t\tinstance = resolved.instance;\r\n\t\tallExports = resolved.instance.exports;\r\n\t\tmemory = allExports.memory;\r\n\t\tallExports._initialize();\r\n\t}\r\n}\r\n\r\nfunction getHeap() { return memory.buffer; }\r\nfunction getHeapI8() { return new Int8Array(memory.buffer); }\r\nfunction getHeapU8() { return new Uint8Array(memory.buffer); }\r\nfunction getHeapI16() { return new Int16Array(memory.buffer); }\r\nfunction getHeapU16() { return new Uint16Array(memory.buffer); }\r\nfunction getHeapI32() { return new Int32Array(memory.buffer); }\r\nfunction getHeapU32() { return new Uint32Array(memory.buffer); }\r\nfunction getHeapI64() { return new Int64Array(memory.buffer); }\r\nfunction getHeapU64() { return new Uint64Array(memory.buffer); }\r\nfunction getHeapF32() { return new Float32Array(memory.buffer); }\r\nfunction getHeapF64() { return new Float64Array(memory.buffer); }\r\n\r\n${useTopLevelAwait ? `\r\nawait untilReady();\r\n` : \"\"}\r\nexport { \r\n\tallExports, \r\n\tmemory, \r\n\tinstance, \r\n\tmodule, \r\n\tuntilReady,\r\n\tgetHeap,\r\n\tgetHeapI8,\r\n\tgetHeapU8,\r\n\tgetHeapI16,\r\n\tgetHeapU16,\r\n\tgetHeapI32,\r\n\tgetHeapU32,\r\n\tgetHeapI64,\r\n\tgetHeapU64,\r\n\tgetHeapF32,\r\n\tgetHeapF64\r\n};\r\n`);\n            }\n            return filter(allExeUnits, id, async (executionUnit) => {\n                await executionUnit.loadCppFile(id, (include) => this.addWatchFile(normalizePath(include)));\n                return { code: \";\", moduleSideEffects: true };\n            });\n        },\n        async transform(_code, id) {\n            //const ids = [...this.getModuleIds()];\n            //const mapped = ids.map(id => this.getModuleInfo(id));\n            return filter(allExeUnits, id, async (executionUnit) => {\n                let cppFile = executionUnit.getCppFileByPath(id);\n                console.assert(cppFile);\n                return {\n                    //code: `export * from ${JSON.stringify(HELPER_IMPORT_WASM_ + cppFile.wasm!.uniqueId)}`,\n                    code: `\r\nexport { \r\n\tallExports as __allExports, \r\n\tmemory as __memory, \r\n\tinstance as __instance, \r\n\tmodule as __module, \r\n\tuntilReady as __untilReady,\r\n\r\n\tgetHeap as __getHeap,\r\n\tgetHeapI8 as __getHeapI8,\r\n\tgetHeapU8 as __getHeapU8,\r\n\tgetHeapI16 as __getHeapI16,\r\n\tgetHeapU16 as __getHeapU16,\r\n\tgetHeapI32 as __getHeapI32,\r\n\tgetHeapU32 as __getHeapU32,\r\n\tgetHeapI64 as __getHeapI64,\r\n\tgetHeapU64 as __getHeapU64,\r\n\tgetHeapF32 as __getHeapF32,\r\n\tgetHeapF64 as __getHeapF64,\r\n\tallExports as ${SyntheticModuleName}${executionUnit.uniqueId}\r\n} from ${JSON.stringify(WASM_LOADER + executionUnit.uniqueId)}\r\n`,\n                    moduleSideEffects: true\n                };\n            });\n        },\n        async moduleParsed(info) {\n            // Whenever we do \"import { foo } from 'file.cpp';\", we want to extract the \"foo\" identifiers\n            // so that we know what exported options emscripten wants.\n            // (The alternative is just exporting everything)\n            if (info.ast) {\n                simple(info.ast, {\n                    ImportDeclaration: (n) => {\n                        const node = n;\n                        let exeUnit = allExeUnits.getByUrl((node).source.value);\n                        if (exeUnit) {\n                            node.specifiers.forEach(specifier => {\n                                if (specifier.type == \"ImportNamespaceSpecifier\") {\n                                    exeUnit.jsImportsAll();\n                                }\n                                if (specifier.type == \"ImportDefaultSpecifier\") {\n                                    exeUnit.jsImportsAll();\n                                }\n                                else if (specifier.type == \"ImportSpecifier\") {\n                                    if (specifier.imported.name.startsWith(\"__\"))\n                                        return;\n                                    if (specifier.imported.name == \"_initialize\")\n                                        return;\n                                    exeUnit.addImportFromJs(specifier.imported.name);\n                                }\n                                else {\n                                    debugger;\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        },\n        renderStart() {\n            allImports = new Set();\n            allExeUnits.executionUnitsById.forEach((i) => {\n                i.imports.forEach(i => {\n                    allImports.add(i.base);\n                });\n            });\n            unhandledImports = new Set([...allImports]);\n        },\n        async renderChunk(code) {\n            // This is where we take out the WASI imports we don't use\n            const R = /\\s+((?:[a-z]|[0-9]|_)+),?\\s+\\/\\*\\*\\s+__@WASM_IMPORT_OMITTABLE__\\s+\\*\\*\\//g;\n            // Still don't know if this is actually the best way to do this...?\n            const s = new MagicString(code);\n            s.replaceAll(R, (_whole, funcName) => {\n                if (allImports.has(funcName)) {\n                    unhandledImports.delete(funcName);\n                    return `\\n\\t${funcName},`;\n                }\n                return `\\n\\t/* Omitted ${funcName} */`;\n            });\n            return {\n                code: s.toString(),\n                map: s.generateMap({ hires: true }), // ??? https://stackoverflow.com/questions/76186660/how-to-use-magicstring-to-provide-a-sourcemap-with-rollups-renderchunk-hook\n            };\n        },\n        generateBundle() {\n            if (unhandledImports.size) {\n                console.warn(`The following imports were unhandled and will likely cause errors at runtime`);\n                console.warn([...unhandledImports].join(\", \"));\n            }\n        },\n        async buildEnd() {\n            // Write all the WASM modules\n            await Promise.all([...allExeUnits.executionUnitsById].map(([_id, unit]) => { return unit.compile(); }));\n        },\n    };\n}\nexport default pluginCpp;\nexport { pluginCpp };\n//# sourceMappingURL=index.js.map"],"names":["exec","readFileNode","mkdir","dirname","cwd","relative","stdout","clearLine","cursorTo","normalizePath","MapOfSets","join","basename","simple"],"mappings":"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"}